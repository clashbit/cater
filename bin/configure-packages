#!/usr/bin/env node

// Copyright Jon Williams 2017-2018. See LICENSE file.
const clone = require('clone');
const fs = require('fs');
const path = require('path');

// Packages that are optionally installed in a example or package directory
const WHITELIST_PACKAGES = ['express'];

KEY_VERSIONS = {
  'babel-core': '^6.26.0',
  jest: '^22.0.4',
  webpack: '^3.10.0'
};

const readPackageFile = function(...args) {
  const packageFile = path.join(...args);
  if (!fs.existsSync(packageFile)) return null;
  const content = fs.readFileSync(packageFile).toString();
  return JSON.parse(content);
};

// Get the version from the top level package.json
const masterPackage = readPackageFile(__dirname, '..', 'package.json');
const version = masterPackage.version;

const updatePackageFile = function(...args) {
  const fn = args.pop();
  const packageFile = path.join(...args);
  const package = readPackageFile(...args);
  if (package === null) return null;

  // Get whitelist dependencies
  const deps = Object.assign({}, package.dependencies);
  const devs = Object.assign({}, package.devDependencies);
  const addDeps = WHITELIST_PACKAGES.filter((x) => Object.keys(deps).includes(x));
  const addDevs = Object.keys(package.devDependencies || {}).filter((k) => k.startsWith('cater-'));

  const updatedPackage = fn(package);

  // Add back in whitelisted dependencies
  addDeps.forEach((name) => (updatedPackage.dependencies[name] = deps[name]));
  addDevs.forEach((name) => (updatedPackage.devDependencies[name] = devs[name]));

  // Update deps and devDeps
  [updatedPackage.dependencies, updatedPackage.devDependencies].forEach((d) => {
    if (!d) return; // // Not specified in this package

    // Update packages like babel, jest to the master version number
    Object.keys(KEY_VERSIONS)
      .filter((k) => !!d[k])
      .forEach((k) => (d[k] = KEY_VERSIONS[k]));

    // Lock all cater-* packages to the same version
    Object.keys(d)
      .filter((k) => k.startsWith('cater-'))
      .forEach((k) => (d[k] = `^${version}`));
  });

  fs.writeFileSync(packageFile, JSON.stringify(updatedPackage, null, 2));
  return updatedPackage;
};

// Package template used for examples/*/package.json
const exampleTemplate = {
  author: 'Jon Williams <jon@jonathannen.com> https://jonathannen.com',
  license: 'MIT',
  version: version,
  private: true,
  dependencies: {
    cater: `^${version}`
  },
  devDependencies: {
    'cater-build': `^${version}`,
    'cater-jest': `^${version}`,
    jest: '^22.0.4',
    supertest: '^3.0.0'
  }
};

// Package template used for packages/*/package.json
const packageTemplate = {
  author: 'Jon Williams <jon@jonathannen.com> https://jonathannen.com',
  license: 'MIT',
  version: masterPackage.version,
  scripts: {
    test: 'jest'
  }
};

// Scripts added to examples/*/package.json - if not present already
const scripts = {
  build: 'cater build',
  dev: 'cater dev',
  start: 'NODE_ENV=production cater start',
  test: 'jest'
};

// Example Packages
const exampleDirectory = path.join(__dirname, '..', 'examples');
fs.readdirSync(exampleDirectory).forEach((directory) => {
  const result = updatePackageFile(exampleDirectory, directory, 'package.json', (pkg) => {
    pkg.name = directory;
    pkg = Object.assign(pkg, clone(exampleTemplate));

    Object.keys(scripts).forEach((k) => {
      if (!!pkg.scripts[k]) return;
      pkg.scripts[k] = scripts[k];
    });

    return pkg;
  });
});

// Regular Packages
const packageDirectory = path.join(__dirname, '..', 'packages');
fs.readdirSync(packageDirectory).forEach((directory) => {
  const result = updatePackageFile(packageDirectory, directory, 'package.json', (pkg) => {
    pkg.name = directory;
    return Object.assign(pkg, clone(packageTemplate));
  });
});
